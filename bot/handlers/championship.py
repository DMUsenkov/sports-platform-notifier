# –î–æ–±–∞–≤–∏–º –≤ bot/handlers/championship.py (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from utils.logger import get_logger
from database.repositories.user_repository import UserRepository
from api.client import ApiClient
from bot.keyboards.keyboards import get_championship_menu_keyboard

logger = get_logger("championship_handler")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
api_client = None


def register_championship_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä Aiogram
    """
    global api_client
    api_client = ApiClient()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤
    @dp.message_handler(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã")
    async def recommended_championships(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ API
            championships = await api_client.get_recommended_championships(user.id)

            if not championships:
                await message.answer(
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_championship_menu_keyboard()
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
            await message.answer(
                "üèÜ –í–æ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:",
                reply_markup=get_championship_menu_keyboard()
            )

            for championship in championships:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
                description = championship.get('description', '')
                if len(description) > 200:
                    description = description[:197] + "..."

                response = f"üèÜ *{championship['name']}*\n\n"
                response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {championship['sport']}\n"
                response += f"üåÜ –ì–æ—Ä–æ–¥: {championship['city']}\n"
                response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {championship['team_members_count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {championship['application_deadline']}\n\n"

                if description:
                    response += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}\n\n"

                response += f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /championship_{championship['tournament_id']}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
                await message.answer(response, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_championship_menu_keyboard()
            )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
    @dp.message_handler(lambda message: message.text.startswith('/championship_'))
    async def championship_details(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            championship_id = int(message.text.split('_')[1])

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ API
            championship = await api_client.get_championship_details(championship_id)

            if not championship:
                await message.answer("–ß–µ–º–ø–∏–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
            response = f"üèÜ *{championship['name']}*\n\n"
            response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {championship['sport']}\n"
            response += f"üåÜ –ì–æ—Ä–æ–¥: {championship['city']}\n"
            response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {championship['team_members_count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {championship['application_deadline']}\n\n"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–¥–∏—è—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
            if 'stages' in championship and championship['stages']:
                response += f"üìä *–≠—Ç–∞–ø—ã —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞:*\n"
                for stage in championship['stages']:
                    status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if stage.get('is_published') else "‚è≥ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
                    response += f"- {stage['name']}: {status}\n"

            # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if championship.get('description'):
                response += f"\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{championship['description']}\n"

            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
            response += f"\nüëî –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {championship.get('org_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

            # –°—Ç–∞—Ç—É—Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
            if championship.get('is_stopped'):
                response += "‚ö†Ô∏è –ß–µ–º–ø–∏–æ–Ω–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
            await message.answer(response, parse_mode="Markdown")

        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /championship_<id>, –Ω–∞–ø—Ä–∏–º–µ—Ä /championship_123")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )