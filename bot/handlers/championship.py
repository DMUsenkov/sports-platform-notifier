from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from utils.logger import get_logger
from database.repositories.user_repository import UserRepository
from api.client import ApiClient
from bot.keyboards.keyboards import get_championship_menu_keyboard, get_start_keyboard

logger = get_logger("championship_handler")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
api_client = None


def register_championship_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä Aiogram
    """
    global api_client
    api_client = ApiClient()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤
    @dp.message_handler(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã")
    async def recommended_championships(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
            wait_message = await message.answer("–ò—â–µ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å...")

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ user
            user_id = user.id if hasattr(user, 'id') else user['id'] if isinstance(user,
                                                                                   dict) and 'id' in user else None

            if user_id is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ API
            championships = await api_client.get_recommended_championships(user_id)

            # –í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if championships is None or not isinstance(championships, list) or len(championships) == 0:
                await message.answer(
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_start_keyboard()
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            valid_championships = [c for c in championships if isinstance(c, dict) and c.get('name')]
            if not valid_championships:
                await message.answer(
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_start_keyboard()
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
            await message.answer(
                "üèÜ –í–æ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:",
                reply_markup=get_start_keyboard()
            )

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤ Markdown
            def escape_markdown(text):
                if not text:
                    return ""
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.',
                                 '!']
                for char in special_chars:
                    text = text.replace(char, '\\' + char)
                return text

            count_sent = 0
            for championship in valid_championships:
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    name = escape_markdown(championship.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    sport = escape_markdown(championship.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω'))
                    city = escape_markdown(championship.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω'))
                    team_size = championship.get('team_members_count', '-')
                    deadline = escape_markdown(championship.get('application_deadline', '–ù–µ —É–∫–∞–∑–∞–Ω'))

                    description = championship.get('description', '')
                    if len(description) > 200:
                        description = description[:197] + "..."
                    description = escape_markdown(description)

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    response = f"üèÜ <b>{name}</b>\n\n"
                    response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
                    response += f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                    response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                    response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {deadline}\n\n"

                    if description:
                        response += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"

                    tournament_id = championship.get('tournament_id', championship.get('id'))
                    if tournament_id:
                        response += f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /championship_{tournament_id}"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
                    await message.answer(response, parse_mode="HTML")
                    count_sent += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ: {e}")

                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        name = championship.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        sport = championship.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        city = championship.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        team_size = championship.get('team_members_count', '-')
                        deadline = championship.get('application_deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')

                        # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        plain_response = f"üèÜ {name}\n\n"
                        plain_response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
                        plain_response += f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                        plain_response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                        plain_response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {deadline}\n"

                        tournament_id = championship.get('tournament_id', championship.get('id'))
                        if tournament_id:
                            plain_response += f"\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /championship_{tournament_id}"

                        await message.answer(plain_response)
                        count_sent += 1
                    except Exception as e2:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
            if count_sent == 0:
                await message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_start_keyboard()
                )

        except Exception as e:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            user_id_for_log = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                if hasattr(user, 'id'):
                    user_id_for_log = user.id
                elif isinstance(user, dict) and 'id' in user:
                    user_id_for_log = user['id']
            except:
                pass

            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_for_log}: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_start_keyboard()
            )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ
    @dp.message_handler(lambda message: message.text.startswith('/championship_'))
    async def championship_details(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            wait_message = await message.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ...")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            try:
                championship_id = int(message.text.split('_')[1])
            except (IndexError, ValueError) as e:
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /championship_<id>, –Ω–∞–ø—Ä–∏–º–µ—Ä /championship_123")
                return

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ user
            user_id = user.id if hasattr(user, 'id') else user['id'] if isinstance(user,
                                                                                   dict) and 'id' in user else None

            if user_id is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ API
            championship = await api_client.get_championship_details(championship_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not championship or not isinstance(championship, dict):
                await message.answer("–ß–µ–º–ø–∏–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.")
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            name = championship.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            sport = championship.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')
            city = championship.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
            team_members_count = championship.get('team_members_count', '-')
            application_deadline = championship.get('application_deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
            description = championship.get('description', '')
            org_name = championship.get('org_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
            is_stopped = championship.get('is_stopped', False)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
            response = f"üèÜ <b>{name}</b>\n\n"
            response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
            response += f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
            response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {application_deadline}\n\n"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–¥–∏—è—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
            if 'stages' in championship and championship['stages']:
                response += f"üìä <b>–≠—Ç–∞–ø—ã —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞:</b>\n"
                for stage in championship['stages']:
                    status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if stage.get('is_published') else "‚è≥ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
                    response += f"- {stage.get('name', '–≠—Ç–∞–ø')}: {status}\n"

            # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if description:
                if len(description) > 500:
                    description = description[:497] + "..."
                response += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n"

            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
            response += f"\nüëî –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {org_name}\n"

            # –°—Ç–∞—Ç—É—Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
            if is_stopped:
                response += "‚ö†Ô∏è –ß–µ–º–ø–∏–æ–Ω–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML
            await message.answer(response, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ: {e}")

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ."

            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ API
            if hasattr(e, 'response') and hasattr(e.response, 'status'):
                if e.response.status == 404:
                    error_message = "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                elif e.response.status == 403:
                    error_message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ."
                elif e.response.status == 401:
                    error_message = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."

            await message.answer(
                f"{error_message} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_start_keyboard()
            )